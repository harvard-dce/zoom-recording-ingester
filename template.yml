AWSTemplateFormatVersion : '2010-09-09'
Description: Zoom to Opencast video ingester

Parameters:
  LambdaCodeBucket:
    Type: String
  NotificationEmail:
    Type: String
  ZoomApiKey:
    Type: String
  ZoomApiSecret:
    Type: String
  ZoomLoginUser:
    Type: String
  ZoomLoginPassword:
    Type: String
  OpencastBaseUrl:
    Type: String
  OpencastApiUser:
    Type: String
  OpencastApiPassword:
    Type: String
  DefaultOpencastSeriesId:
    Type: String
    Default: "${AWS::NoValue}"
  LocalTimeZone:
    Type: String
    Default: 'US/Eastern'
  VpcSecurityGroupId:
    Type: String
  VpcSubnetId:
    Type: String

Conditions:
  UploadFunctionVpcConfig: !Not [!Equals ["", !Ref VpcSubnetId]]

Resources:

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${AWS::StackName}-codebuild"
      Source:
        Type: GITHUB
        Location: "https://github.com/harvard-dce/zoom-recording-ingester.git"
        GitCloneDepth: 1
      Environment:
        Type: "LINUX_CONTAINER"
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/python:3.5.2"
      Artifacts:
        Type: S3
        Location: !Ref LambdaCodeBucket
        Name: '/'
      BadgeEnabled: 'true'
      ServiceRole: !Ref ZoomIngesterRole
      TimeoutInMinutes: 5

  ZoomVideosBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-recording-files"
      LifecycleConfiguration:
        Rules:
          - Id: DeleteAfterTwoWeeks
            Prefix: ""
            Status: Enabled
            ExpirationInDays: 14

  ZoomIngesterUploadQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${AWS::StackName}-uploads.fifo"
      FifoQueue: true
      MessageRetentionPeriod: 1209600 # 14 days
      ContentBasedDeduplication: true
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt [ZoomIngesterUploadDeadLetterQueue, Arn]
        maxReceiveCount: 2

  ZoomIngesterUploadDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${AWS::StackName}-uploads-deadletter.fifo"
      FifoQueue: true
      MessageRetentionPeriod: 1209600 # 14 days
      ContentBasedDeduplication: true

  ZoomIngesterDownloaderQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${AWS::StackName}-downloads.fifo"
      FifoQueue: true
      DelaySeconds: 300
      MessageRetentionPeriod: 1209600 # 14 days
      ContentBasedDeduplication: true
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt [ZoomIngesterDownloaderDeadLetterQueue, Arn]
        maxReceiveCount: 2

  ZoomIngesterDownloaderDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${AWS::StackName}-downloads-deadletter.fifo"
      FifoQueue: true
      MessageRetentionPeriod: 1209600 # 14 days
      ContentBasedDeduplication: true

  ZoomIngesterRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: apigateway.amazonaws.com
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:*"
                  - "lambda:*"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "s3:*"
                Resource: !GetAtt [ZoomVideosBucket, Arn]
              - Effect: "Allow"
                Action:
                  - "s3:*"
                # Permissions to perform actions on objects within the S3 bucket needed in addition
                # to permissions to perform actions on the S3 bucket.
                Resource: !Join ['', [!GetAtt [ZoomVideosBucket, Arn], "/*"]]
              - Effect: "Allow"
                Action:
                  - "s3:*"
                Resource: !Join ['', ["arn:aws:s3:::", !Ref LambdaCodeBucket]]
              - Effect: "Allow"
                Action:
                  - "s3:*"
                Resource: !Join ['', ["arn:aws:s3:::", !Ref LambdaCodeBucket, "/*"]]
              - Effect: "Allow"
                Action:
                  - "sqs:*"
                Resource: !GetAtt [ZoomIngesterUploadQueue, Arn]
              - Effect: "Allow"
                Action:
                  - "sqs:*"
                Resource: !GetAtt [ZoomIngesterDownloaderQueue, Arn]
              - Effect: "Allow"
                Action:
                  - "sqs:*"
                Resource: !GetAtt [ZoomIngesterDownloaderDeadLetterQueue, Arn]
              - Effect: "Allow"
                Action:
                  - "sns:*"
                Resource: !Ref ZoomIngesterNotificationTopic
              - Effect: "Allow"
                Action:
                  - "dynamodb:GetItem"
                Resource: !GetAtt [ClassScheduleDynamoTable, Arn]

  ZoomIngesterApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Ref AWS::StackName

  ZoomIngesterResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ZoomIngesterApi
      ParentId: !GetAtt [ZoomIngesterApi, RootResourceId]
      PathPart: "new_recording"

  ZoomIngesterWebhook:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Ref: ZoomIngesterApi
      ResourceId:
        Ref: ZoomIngesterResource
      HttpMethod: POST
      AuthorizationType: NONE
      RequestParameters:
        method.request.querystring.type: false
        method.request.querystring.content: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Credentials: !GetAtt [ZoomIngesterRole, Arn]
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ZoomIngesterWebhookFunction.Arn}/invocations
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          StatusCode: 200

  ZoomIngesterWebhookFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: zoom-webhook.handler
      Runtime: python3.6
      Timeout: 30
      Role: !GetAtt [ZoomIngesterRole, Arn]
      FunctionName: !Sub "${AWS::StackName}-zoom-webhook-function"
      Environment:
        Variables:
          DOWNLOAD_QUEUE_NAME: !GetAtt [ZoomIngesterDownloaderQueue, QueueName]
          LOCAL_TIME_ZONE: !Ref LocalTimeZone
          DEBUG: 0
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: zoom-webhook.zip

  ZoomIngesterDeploy:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ZoomIngesterWebhook
    Properties:
      RestApiId: !Ref ZoomIngesterApi
      Description: "Deployment for the zoom ingester api"
      StageName: "testing"

  ZoomIngesterStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ZoomIngesterDeploy
      RestApiId: !Ref ZoomIngesterApi
      StageName: "latest"
      MethodSettings:
        - DataTraceEnabled: true
          MetricsEnabled: true
          HttpMethod: "*"
          LoggingLevel: INFO
          ResourcePath: "/*"

  ZoomIngesterApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Enabled: true
      StageKeys:
        - RestApiId: !Ref ZoomIngesterApi
          StageName: !Ref ZoomIngesterStage

  ZoomDownloaderFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: zoom-downloader.handler
      Runtime: python3.6
      MemorySize: 512
      Timeout: 300
      Role: !GetAtt [ZoomIngesterRole, Arn]
      FunctionName: !Sub "${AWS::StackName}-zoom-downloader-function"
      Environment:
        Variables:
          ZOOM_VIDEOS_BUCKET: !Ref ZoomVideosBucket
          ZOOM_LOGIN_USER: !Ref ZoomLoginUser
          ZOOM_LOGIN_PASSWORD: !Ref ZoomLoginPassword
          DOWNLOAD_QUEUE_NAME: !GetAtt [ZoomIngesterDownloaderQueue, QueueName]
          UPLOAD_QUEUE_NAME: !GetAtt [ZoomIngesterUploadQueue, QueueName]
          DEADLETTER_QUEUE_NAME: !GetAtt [ZoomIngesterDownloaderDeadLetterQueue, QueueName]
          ZOOM_API_KEY: !Ref ZoomApiKey
          ZOOM_API_SECRET: !Ref ZoomApiSecret
          DEBUG: 0
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: zoom-downloader.zip

  ZoomDownloaderEventRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(5 minutes)
      State: ENABLED
      Targets:
        - Arn: !GetAtt [ZoomDownloaderFunction, Arn]
          Id: "DownloaderFunction"

  ZoomDownloaderEventRulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ZoomDownloaderFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt [ZoomDownloaderEventRule, Arn]

  ZoomUploaderFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: zoom-uploader.handler
      Runtime: python3.6
      MemorySize: 256
      Timeout: 300
      Role: !GetAtt [ZoomIngesterRole, Arn]
      FunctionName: !Sub "${AWS::StackName}-zoom-uploader-function"
      Environment:
        Variables:
          ZOOM_VIDEOS_BUCKET: !Ref ZoomVideosBucket
          UPLOAD_QUEUE_NAME: !GetAtt [ZoomIngesterUploadQueue, QueueName]
          OPENCAST_BASE_URL: !Ref OpencastBaseUrl
          OPENCAST_API_USER: !Ref OpencastApiUser
          OPENCAST_API_PASSWORD: !Ref OpencastApiPassword
          DEFAULT_SERIES_ID: !Ref DefaultOpencastSeriesId
          CLASS_SCHEDULE_TABLE: !Ref ClassScheduleDynamoTable
          LOCAL_TIME_ZONE: !Ref LocalTimeZone
          DEBUG: 0
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: zoom-uploader.zip
      VpcConfig:
        !If
          - UploadFunctionVpcConfig
          -
            SecurityGroupIds:
              - !Ref VpcSecurityGroupId
            SubnetIds:
              - !Ref VpcSubnetId
          - !Ref AWS::NoValue

  ZoomUploaderEventRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(20 minutes)
      State: ENABLED
      Targets:
        - Arn: !GetAtt [ZoomUploaderFunction, Arn]
          Id: "UploaderFunction"
          Input: "{\"num_uploads\": 1}"

  ZoomUploaderEventRulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ZoomUploaderFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt [ZoomUploaderEventRule, Arn]

  ZoomIngesterNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${AWS::StackName}-notification-topic"
      Subscription:
        - Protocol: email
          Endpoint: !Ref NotificationEmail

  ZoomWebhookErrorsMetricAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "alarms on any webhook function invocation error"
      AlarmActions:
        - !Ref ZoomIngesterNotificationTopic
      MetricName: Errors
      Dimensions:
        - Name: FunctionName
          Value: !Ref ZoomIngesterWebhookFunction
      Namespace: AWS/Lambda
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      Statistic: Sum

  ZoomWebhook4xxMetricAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "alarms on any webhook function 4xx response"
      AlarmActions:
        - !Ref ZoomIngesterNotificationTopic
      MetricName: 4XXError
      Dimensions:
        - Name: ApiName
          Value: !Ref AWS::StackName
        - Name: Stage
          Value: "latest"
      Namespace: AWS/ApiGateway
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      Statistic: Sum

  ZoomWebhook5xxMetricAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "alarms on any webhook function 5xx response"
      AlarmActions:
        - !Ref ZoomIngesterNotificationTopic
      MetricName: 5XXError
      Dimensions:
        - Name: ApiName
          Value: !Ref AWS::StackName
        - Name: Stage
          Value: "latest"
      Namespace: AWS/ApiGateway
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      Statistic: Sum

  ZoomWebhookLatencyMetricAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "alarms if the webhook method latency gets too high"
      AlarmActions:
        - !Ref ZoomIngesterNotificationTopic
      MetricName: Latency
      Dimensions:
        - Name: ApiName
          Value: !Ref AWS::StackName
        - Name: Stage
          Value: "latest"
      Namespace: AWS/ApiGateway
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Period: 60
      EvaluationPeriods: 3
      Threshold: 10000
      Statistic: Average

  ZoomDownloaderErrorsMetricAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "alarms on any downloader function invocation error"
      AlarmActions:
        - !Ref ZoomIngesterNotificationTopic
      MetricName: Errors
      Dimensions:
        - Name: FunctionName
          Value: !Ref ZoomDownloaderFunction
      Namespace: AWS/Lambda
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      Statistic: Sum

  ZoomDownloaderInvocationsMetricAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "alarms in the absence of new downloads in past 24hrs"
      AlarmActions:
        - !Ref ZoomIngesterNotificationTopic
      MetricName: Invocations
      Dimensions:
        - Name: FunctionName
          Value: !Ref ZoomDownloaderFunction
      Namespace: AWS/Lambda
      ComparisonOperator: LessThanThreshold
      Period: 86400
      EvaluationPeriods: 1
      Threshold: 1
      Statistic: Sum

  ZoomUploadQueueDepthMetricAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "alarm if too many pending uploads build up in queue"
      AlarmActions:
        - !Ref ZoomIngesterNotificationTopic
      MetricName: ApproximateNumberOfMessagesVisible
      Dimensions:
        - Name: QueueName
          Value: !GetAtt [ZoomIngesterUploadQueue, QueueName]
      Namespace: AWS/SQS
      Statistic: Sum
      Period: 300
      Threshold: 40
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      InsufficientDataActions:
        - !Ref ZoomIngesterNotificationTopic

  ZoomUploaderErrorsMetricAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "alarms on any uploader function invocation error"
      AlarmActions:
        - !Ref ZoomIngesterNotificationTopic
      MetricName: Errors
      Dimensions:
        - Name: FunctionName
          Value: !Ref ZoomUploaderFunction
      Namespace: AWS/Lambda
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      Statistic: Sum

  ZoomLogNotificationsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: zoom-log-notifications.handler
      Runtime: python3.6
      MemorySize: 128
      Timeout: 5
      Role: !GetAtt [ZoomIngesterRole, Arn]
      FunctionName: !Sub "${AWS::StackName}-zoom-log-notifications-function"
      Environment:
        Variables:
          DEBUG: 0
          STACK_NAME: !Ref AWS::StackName
          SNS_TOPIC_ARN: !Ref ZoomIngesterNotificationTopic
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: zoom-log-notifications.zip

  ZoomNewLogGroupEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - "aws.logs"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - "logs.amazonaws.com"
          eventName:
            - "CreateLogGroup"
      State: ENABLED
      Targets:
        -
          Arn: !GetAtt [ZoomLogNotificationsFunction, Arn]
          Id: "LogNotificationFunction"

  ZoomNewLogGroupEventRulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ZoomLogNotificationsFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt [ZoomNewLogGroupEventRule, Arn]

  ZoomWebhookLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-zoom-webhook-function"
      RetentionInDays: 60

  ZoomDownloaderLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-zoom-downloader-function"
      RetentionInDays: 60

  ZoomUploaderLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-zoom-uploader-function"
      RetentionInDays: 60

  RecordingCompletedMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref ZoomWebhookLogGroup
      FilterPattern: "{ $.message.payload.status = \"RECORDING_MEETING_COMPLETED\" }"
      MetricTransformations:
      - MetricValue: '1'
        MetricNamespace: !Sub "${AWS::StackName}-ZoomIngesterLogMetrics"
        MetricName: "MeetingRecordingCompleted"

  MeetingStartedMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref ZoomWebhookLogGroup
      FilterPattern: "{ $.message.payload.status = \"STARTED\" }"
      MetricTransformations:
      - MetricValue: '1'
        MetricNamespace: !Sub "${AWS::StackName}-ZoomIngesterLogMetrics"
        MetricName: "MeetingStarted"

  MeetingEndedMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref ZoomWebhookLogGroup
      FilterPattern: "{ $.message.payload.status = \"ENDED\" }"
      MetricTransformations:
      - MetricValue: '1'
        MetricNamespace: !Sub "${AWS::StackName}-ZoomIngesterLogMetrics"
        MetricName: "MeetingEnded"

  RecordingDurationMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref ZoomDownloaderLogGroup
      FilterPattern: "{$.message.duration > 0}"
      MetricTransformations:
      - MetricValue: "$.message.duration"
        MetricNamespace: !Sub "${AWS::StackName}-ZoomIngesterLogMetrics"
        MetricName: "RecordingDuration"

  SkippedForDurationMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref ZoomDownloaderLogGroup
      FilterPattern: "Skipping"
      MetricTransformations:
      - MetricValue: "1"
        MetricNamespace: !Sub "${AWS::StackName}-ZoomIngesterLogMetrics"
        MetricName: "SkippedForDuration"

  WorkflowInitiatedMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref ZoomUploaderLogGroup
      FilterPattern: "Workflow"
      MetricTransformations:
      - MetricValue: "1"
        MetricNamespace: !Sub "${AWS::StackName}-ZoomIngesterLogMetrics"
        MetricName: "WorkflowsInitiated"

  ClassScheduleDynamoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-schedule"
      KeySchema:
        - AttributeName: zoom_series_id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: zoom_series_id
          AttributeType: S
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1